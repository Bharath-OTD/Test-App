{
  "summary": {
    "title": "Test Threat Model for DVWA",
    "owner": "Test"
  },
  "detail": {
    "contributors": [],
    "diagrams": [
      {
        "title": "DVWA Web Application",
        "thumbnail": "./public/content/images/thumbnail.jpg",
        "id": 0,
        "diagramJson": {
          "cells": [
            {
              "type": "tm.Actor",
              "size": {
                "width": 160,
                "height": 80
              },
              "position": {
                "x": 50,
                "y": 61
              },
              "angle": 0,
              "id": "034df550-63b2-48fe-8e20-83f7295ece2e",
              "z": 1,
              "hasOpenThreats": false,
              "attrs": {
                ".element-shape": {
                  "class": "element-shape hasNoOpenThreats isInScope"
                },
                "text": {
                  "text": "Web Browser"
                },
                ".element-text": {
                  "class": "element-text hasNoOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Process",
              "size": {
                "width": 100,
                "height": 100
              },
              "position": {
                "x": 379,
                "y": 14
              },
              "angle": 0,
              "id": "5e8ce8a1-a495-4ea5-a430-a4bf15f526cd",
              "z": 6,
              "hasOpenThreats": true,
              "threats": [
                {
                  "status": "Open",
                  "severity": "High",
                  "title": "Insufficient Transport Layer Protection",
                  "type": "Information disclosure",
                  "description": "This application has failed to encrypt network traffic. SSL/TLS has not been implemented leading which exposes data, credentials and session ID's to interception.",
                  "mitigation": "It is recommended that Applications should use SSL/TLS for protecting all communications passing between the client and the server."
                },
                {
                  "status": "Open",
                  "severity": "Low",
                  "title": "Using Components with known vulnerabilities",
                  "type": "Information disclosure",
                  "description": "Components, especially outdated libraries, frameworks and services should never be used when there are known vulnerabilities in the applications could lead to possibility of exploitation. \n\nVulnerabilities in libraries and software are extremely common and could be used to compromise the security of systems using the software. If the components, framework, services, etc. of an application are not properly designed in a secure way, then the attacker takes this as an advantage to break your system. In this case, the application is using Vulnerable OpenSSL/1.1.1c",
                  "mitigation": "Make sure that the frameworks, services, modules and components that are in use in your web applications are the latest versions."
                },
                {
                  "status": "Open",
                  "severity": "Low",
                  "title": "Directory Listing",
                  "type": "Information disclosure",
                  "description": "The web server is configured to display the list of files contained in this directory. This is not recommended because the directory may contain files that are not normally exposed through links on the web site.\n\nA misconfigured server can show a directory listing, which could potentially yield sensitive information to an attacker. An attacker can gain information about the web application by browsing directory listings that reveal files and folder hierarchy in the application. This information can be used to exploit vulnerabilities in the web application",
                  "mitigation": "Restrict URL directory listings from the web server configuration"
                }
              ],
              "attrs": {
                ".element-shape": {
                  "class": "element-shape hasOpenThreats isInScope"
                },
                "text": {
                  "text": "Web\nApplication"
                },
                ".element-text": {
                  "class": "element-text hasOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Flow",
              "smooth": true,
              "source": {
                "id": "5e8ce8a1-a495-4ea5-a430-a4bf15f526cd"
              },
              "target": {
                "id": "034df550-63b2-48fe-8e20-83f7295ece2e"
              },
              "vertices": [],
              "id": "edc26993-1e38-4df1-b986-dd0e58b307dd",
              "labels": [
                {
                  "position": {
                    "distance": 0.42760341956042114,
                    "offset": 28.793147961028247
                  },
                  "attrs": {
                    "text": {
                      "text": "Web Response",
                      "font-weight": "400",
                      "font-size": "small"
                    }
                  }
                }
              ],
              "z": 8,
              "hasOpenThreats": false,
              "attrs": {
                ".marker-target": {
                  "class": "marker-target hasNoOpenThreats isInScope"
                },
                ".connection": {
                  "class": "connection hasNoOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Store",
              "size": {
                "width": 160,
                "height": 80
              },
              "position": {
                "x": 600,
                "y": 79
              },
              "angle": 0,
              "id": "2e0324fc-5b1a-4eee-80a0-3ad14376feb4",
              "z": 15,
              "hasOpenThreats": false,
              "attrs": {
                ".element-shape": {
                  "class": "element-shape hasNoOpenThreats isInScope"
                },
                "text": {
                  "text": "Database"
                },
                ".element-text": {
                  "class": "element-text hasNoOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Flow",
              "smooth": true,
              "source": {
                "x": 675,
                "y": 73
              },
              "target": {
                "id": "5e8ce8a1-a495-4ea5-a430-a4bf15f526cd"
              },
              "vertices": [
                {
                  "x": 587,
                  "y": 34
                },
                {
                  "x": 521,
                  "y": 21
                }
              ],
              "id": "a9c2eb73-1aee-4cfa-921a-8732b286fe3d",
              "labels": [
                {
                  "position": 0.5,
                  "attrs": {
                    "text": {
                      "text": "Web App Query\nResults",
                      "font-weight": "400",
                      "font-size": "small"
                    }
                  }
                }
              ],
              "z": 17,
              "hasOpenThreats": true,
              "threats": [
                {
                  "status": "Open",
                  "severity": "High",
                  "title": "Session Fixation",
                  "type": "Spoofing",
                  "description": "Session Fixation is an attack that permits an attacker to hijack a valid user session. The attack explores a limitation in the way the web application manages the session ID, more specifically the vulnerable web application. When authenticating a user, it doesn't assign a new session ID, making it possible to use an existent session ID. The attack consists of inducing a user to authenticate himself with a known session ID, and then hijacking the user-validated session by the knowledge of the used session ID. The attacker has to provide a legitimate Web application session ID and try to make the victim's browser use it.",
                  "mitigation": "Web applications must ignore any session ID provided by the user's browser at login and must always generate a new session to which the user will log in if successfully authenticated."
                },
                {
                  "status": "Open",
                  "severity": "Low",
                  "title": "Cookie Not Marked as HttpOnly",
                  "description": "We identified a cookie - PHPSESSID not marked as HTTPOnly.\n\nHTTPOnly cookies cannot be read by client-side scripts, therefore marking a cookie as HTTPOnly can provide an additional layer of protection against cross-site scripting attacks.\n\nDuring a cross-site scripting attack, an attacker might easily access cookies and hijack the victim's session.",
                  "mitigation": "Mark the cookie as HTTPOnly. This will be an extra layer of defense against XSS.",
                  "type": "Spoofing"
                }
              ],
              "attrs": {
                ".marker-target": {
                  "class": "marker-target hasOpenThreats isInScope"
                },
                ".connection": {
                  "class": "connection hasOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Flow",
              "smooth": true,
              "source": {
                "id": "034df550-63b2-48fe-8e20-83f7295ece2e"
              },
              "target": {
                "id": "5e8ce8a1-a495-4ea5-a430-a4bf15f526cd"
              },
              "vertices": [
                {
                  "x": 167,
                  "y": 218
                }
              ],
              "id": "7f7bd6bc-8bcb-42da-88af-b5132cb9ea91",
              "labels": [
                {
                  "position": {
                    "distance": 0.6907804363013281,
                    "offset": 30.941966969503802
                  },
                  "attrs": {
                    "text": {
                      "text": "Web Request",
                      "font-weight": "400",
                      "font-size": "small"
                    }
                  }
                }
              ],
              "z": 18,
              "hasOpenThreats": true,
              "threats": [
                {
                  "status": "Open",
                  "severity": "High",
                  "title": "Weak Easily Guessable Credentials in use",
                  "type": "Elevation of privilege",
                  "description": "Application is using Weak easily guessable passwords such as username - admin and password - password.",
                  "mitigation": "It is recommended to implement a password policy which requires minimum password length to be 8 characters including uppercase, lowercase characters, numbers and special characters."
                },
                {
                  "status": "Open",
                  "severity": "Medium",
                  "title": "Inadequate Account Lockout Policy",
                  "type": "Elevation of privilege",
                  "description": "We found that Account lockout mechanisms which are used to prevent brute force attacks for guessing passwords are not implemented.\nLack of Account Lockout mechanisms require a balance between protecting accounts from unauthorized access and protecting users from being denied authorized access.",
                  "mitigation": "It is recommended to implement Account Lockout Policy which will lockout user accounts after 5 to 10 failed login attempts."
                }
              ],
              "attrs": {
                ".marker-target": {
                  "class": "marker-target hasOpenThreats isInScope"
                },
                ".connection": {
                  "class": "connection hasOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Flow",
              "smooth": true,
              "source": {
                "id": "5e8ce8a1-a495-4ea5-a430-a4bf15f526cd"
              },
              "target": {
                "id": "2e0324fc-5b1a-4eee-80a0-3ad14376feb4"
              },
              "vertices": [
                {
                  "x": 532,
                  "y": 179
                }
              ],
              "id": "2fb4d069-9c05-418a-bc1a-6732bb5b8d56",
              "labels": [
                {
                  "position": {
                    "distance": 0.43833013670540627,
                    "offset": 26.053690626585187
                  },
                  "attrs": {
                    "text": {
                      "text": "Queries",
                      "font-weight": "400",
                      "font-size": "small"
                    }
                  }
                }
              ],
              "z": 19,
              "hasOpenThreats": false,
              "attrs": {
                ".marker-target": {
                  "class": "marker-target hasNoOpenThreats isInScope"
                },
                ".connection": {
                  "class": "connection hasNoOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Actor",
              "size": {
                "width": 160,
                "height": 80
              },
              "position": {
                "x": 12,
                "y": 437
              },
              "angle": 0,
              "id": "2f0d3237-8696-445e-9ede-5c7f753d9903",
              "z": 20,
              "hasOpenThreats": true,
              "threats": [
                {
                  "status": "Open",
                  "severity": "Medium",
                  "title": "Information Disclosure (phpinfo())",
                  "type": "Information disclosure",
                  "description": "We identified an information disclosure (phpinfo()).\n\nphpinfo() is a debug functionality that prints out detailed information on both the system and the PHP configuration.",
                  "mitigation": "Remove pages that call phpinfo() from the web server."
                }
              ],
              "attrs": {
                ".element-shape": {
                  "class": "element-shape hasOpenThreats isInScope"
                },
                "text": {
                  "text": "PHP Info Page"
                },
                ".element-text": {
                  "class": "element-text hasOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Process",
              "size": {
                "width": 100,
                "height": 100
              },
              "position": {
                "x": 3,
                "y": 267
              },
              "angle": 0,
              "id": "6a08f969-bb14-424f-806d-4580cd06c8c6",
              "z": 21,
              "hasOpenThreats": false,
              "attrs": {
                ".element-shape": {
                  "class": "element-shape hasNoOpenThreats isInScope"
                },
                "text": {
                  "text": "After\nSuccessful\nLogin to\nApplication"
                },
                ".element-text": {
                  "class": "element-text hasNoOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Process",
              "size": {
                "width": 100,
                "height": 100
              },
              "position": {
                "x": 259,
                "y": 308
              },
              "angle": 0,
              "id": "5826c428-383e-4f1b-b3e5-e119211a5579",
              "z": 22,
              "hasOpenThreats": false,
              "attrs": {
                ".element-shape": {
                  "class": "element-shape hasNoOpenThreats isInScope"
                },
                "text": {
                  "text": "DVWA Security\nLevel Page"
                },
                ".element-text": {
                  "class": "element-text hasNoOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Flow",
              "smooth": true,
              "source": {
                "id": "6a08f969-bb14-424f-806d-4580cd06c8c6"
              },
              "target": {
                "id": "2f0d3237-8696-445e-9ede-5c7f753d9903"
              },
              "vertices": [],
              "id": "a8588f94-3150-4fce-b94d-30f26c2d8df2",
              "labels": [
                {
                  "position": {
                    "distance": 0.29045598487217467,
                    "offset": 42.481696115058426
                  },
                  "attrs": {
                    "text": {
                      "text": "",
                      "font-weight": "400",
                      "font-size": "small"
                    }
                  }
                }
              ],
              "z": 23,
              "hasOpenThreats": false,
              "attrs": {
                ".marker-target": {
                  "class": "marker-target hasNoOpenThreats isInScope"
                },
                ".connection": {
                  "class": "connection hasNoOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Flow",
              "smooth": true,
              "source": {
                "id": "6a08f969-bb14-424f-806d-4580cd06c8c6"
              },
              "target": {
                "id": "5826c428-383e-4f1b-b3e5-e119211a5579"
              },
              "vertices": [
                {
                  "x": 133,
                  "y": 319
                }
              ],
              "id": "b3869f74-de41-4de1-9fa9-6b60f872d492",
              "labels": [
                {
                  "position": 0.5,
                  "attrs": {
                    "text": {
                      "text": "",
                      "font-weight": "400",
                      "font-size": "small"
                    }
                  }
                }
              ],
              "z": 24,
              "hasOpenThreats": false,
              "attrs": {
                ".marker-target": {
                  "class": "marker-target hasNoOpenThreats isInScope"
                },
                ".connection": {
                  "class": "connection hasNoOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Actor",
              "size": {
                "width": 160,
                "height": 80
              },
              "position": {
                "x": 561,
                "y": 301
              },
              "angle": 0,
              "id": "514f9fef-ea15-40f1-84c9-d315e3f2801c",
              "z": 25,
              "hasOpenThreats": false,
              "attrs": {
                ".element-shape": {
                  "class": "element-shape hasNoOpenThreats isInScope"
                },
                "text": {
                  "text": "Secure Web Application\nSource Code"
                },
                ".element-text": {
                  "class": "element-text hasNoOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Flow",
              "smooth": true,
              "source": {
                "id": "5826c428-383e-4f1b-b3e5-e119211a5579"
              },
              "target": {
                "id": "514f9fef-ea15-40f1-84c9-d315e3f2801c"
              },
              "vertices": [],
              "id": "6cc96722-987a-4658-bcb3-4354aa89b088",
              "labels": [
                {
                  "position": {
                    "distance": 0.5058637732249496,
                    "offset": -29.528039473953978
                  },
                  "attrs": {
                    "text": {
                      "text": "Impossible Security\nLevel",
                      "font-weight": "400",
                      "font-size": "small"
                    }
                  }
                }
              ],
              "z": 26,
              "hasOpenThreats": false,
              "attrs": {
                ".marker-target": {
                  "class": "marker-target hasNoOpenThreats isInScope"
                },
                ".connection": {
                  "class": "connection hasNoOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Actor",
              "size": {
                "width": 160,
                "height": 80
              },
              "position": {
                "x": 154,
                "y": 583
              },
              "angle": 0,
              "id": "706f88ab-c8bc-4b1a-bbcb-5773d450e4b5",
              "z": 27,
              "hasOpenThreats": true,
              "threats": [
                {
                  "status": "Open",
                  "severity": "Medium",
                  "title": "Inadequate Account Lockout Policy (Brute Force)",
                  "description": "We found that Account lockout mechanisms which are used to prevent brute force attacks for guessing passwords are not implemented.\nLack of Account Lockout mechanisms require a balance between protecting accounts from unauthorized access and protecting users from being denied authorized access.",
                  "type": "Elevation of privilege",
                  "mitigation": "It is recommended to implement Account Lockout Policy which will lockout user accounts after 5 to 10 failed login attempts."
                },
                {
                  "status": "Open",
                  "severity": "High",
                  "title": "Command Injection",
                  "type": "Tampering",
                  "description": "This application allows user to execute system commands.The rate of this vulnerability is high because it can allow any unauthorized and malicious user to execute commands from the web application to the system and to harvest large amount of information or to compromise the target host.",
                  "mitigation": "This vulnerability exists due to the fact that the web application accepts user input without sanitizing first and passes that input directly to the operating system.The information about the host that an attacker can obtain is large and this threat must be mitigated immediately once it has discovered."
                },
                {
                  "status": "Open",
                  "severity": "High",
                  "type": "Spoofing",
                  "title": "CSRF",
                  "description": "Cross-Site Request Forgery (CSRF) is an attack that forces an end user to execute unwanted actions on a web application in which they’re currently authenticated. This can result in changing e-mail addresses or stealing money or changing password. In this scenario we will be changing the users password.",
                  "mitigation": "The most robust way to defend against CSRF attacks is to include a CSRF token within relevant requests. The token should be:\n\nUnpredictable with high entropy, as for session tokens in general.\nTied to the user's session.\nStrictly validated in every case before the relevant action is executed."
                },
                {
                  "status": "Open",
                  "severity": "High",
                  "title": "Local File Inclusion & Remote File Inclusion",
                  "description": "LFI \n\nWe identified a local file inclusion vulnerability, which occurs when a file from the target system is injected into the attacked server page.\n\nWe confirmed this issue by reading some files from the target web server.\n\nRFI\n\nWe identified a Remote file inclusion (RFI) occurs when a file from a remote web server is inserted into a web page. This can be done on purpose to display content from a remote web application. But, it can also happen by accident, due to a misconfiguration of the respective programming language, wchich can lead to a RFI attack.",
                  "mitigation": "If possible, do not permit appending file paths directly. Make them hard-coded or selectable from a limited hard-coded path list via an index variable.\n\nIf you definitely need dynamic path concatenation, ensure you only accept required characters such as \"a-Z0-9\" and do not allow \"..\" or \"/\" or \"%00\" (null byte) or any other similar unexpected characters.\n\nIt is important to limit the API to allow inclusion only from a directory and directories below it. This way you can ensure any potential attack cannot perform a directory traversal attack.\n\nTo prevent exploitation of the RFI vulnerability,  ensure that you disable the remote inclusion feature in your programming languages' configuration, especially if you do not need it. \n\nIn PHP, you can set allow_url_include to '0'. You should also validate user input before passing it to an Include function.\n\nIf you really have to enable remote file inclusions, then work with a whitelist of files that are allowed to be included on your web application.",
                  "type": "Information disclosure"
                },
                {
                  "status": "Open",
                  "severity": "High",
                  "title": "Unrestricted File Upload",
                  "description": "File upload vulnerability are a major problem with web based applications. In many web server this vulnerability depend entirely on purpose that allows an attacker to upload a file hiding malicious code inside that can then be executed on the server. An attacker might be able to put a phishing page into the website or deface the website.\n\nAttacker may reveal internal information of web server to other and some chances to sensitive data might be informal, by unauthorized people.",
                  "mitigation": "Restrict file types accepted for upload: check the file extension and only allow certain files to be uploaded. Use a whitelist approach instead of a blacklist. Check for double extensions such as .php.png. Check for files without a filename like .htaccess (on ASP.NET, check for configuration files like web.config). Change the permissions on the upload folder so the files within it are not executable. If possible, rename the files that are uploaded.",
                  "type": "Repudiation"
                },
                {
                  "status": "Open",
                  "severity": "Medium",
                  "title": "Insecure CAPTCHA",
                  "type": "Spoofing",
                  "description": "We found that the application is using Insecure CAPTCHA which can be bypassed using parameter manipulation combined with brute force attacks.",
                  "mitigation": "It is recommended to allow change of password only if old password is known by the user and kindly perform server side validation of CAPTCHA value submitted by user."
                },
                {
                  "status": "Open",
                  "severity": "High",
                  "title": "SQL Injection & SQL Injection (Blind)",
                  "type": "Tampering",
                  "description": "SQL injection (SQLi) refers to an injection attack wherein an attacker can execute malicious SQL statements that control a web application's database server.",
                  "mitigation": "Use parameterized queries when dealing with SQL queries that contains user input. Parameterized queries allows the database to understand which parts of the SQL query should be considered as user input, therefore solving SQL injection."
                },
                {
                  "status": "Open",
                  "severity": "High",
                  "description": "Modern web apps establish a series of transactions between the client and the server. Since the HTTP protocol is stateless, the way to follow an user is to create sessions per authenticated user.",
                  "title": "Weak Session IDs",
                  "type": "Spoofing",
                  "mitigation": "It is recommended to generate Strong Session IDs which are highly unpredictable to prevent session hijacking attacks. if the session IDs are not random enough, an attacker can try to brute force them to gain access to the application.\nModern frameworks implement safe, unguessable session IDs. If you are using a recent version of your web toolkit, check to see how the session IDs are generated."
                },
                {
                  "status": "Open",
                  "severity": "Medium",
                  "title": "CSP Bypass",
                  "description": "Content Security Policy was introduced to protect from data injection attacks particularly XSS variants. As the web grew more sophisticated and reliant on JavaScript, hackers found increasingly complex ways to exploit the existing browser trust model, i.e. the Same-origin policy (SOP); XSS attacks bypassed the same origin policy by tricking a site into delivering malicious code along with the intended content. Content Security Policy is a declarative mechanism to whitelist sources of content (such as script sources, objects, images) in a web application. Using various directives in CSP, developers can define what content can run on the current site. For example, if JavaScript can be executed inline, or which domains js files can be loaded from.\n\nSites which want to implement CSP, send a special header value in the http responses with the name Content-Security-Policy.",
                  "type": "Tampering",
                  "mitigation": "It's not always easy to add CSP to an existing website. There are many factors developers need to consider when they need to decide from where external resources should be loaded. This involves caching, available bandwidth and general performance. Security often ranks low on the list of considerations. In order to effectively implement CSP, you either need to consider it before writing the application (the easiest option) or find a way add it on top of your existing applications with the tools CSP provides, most notably nonces and hashes.\nThe problem with these examples are the commands unsafe-inline and unsafe-eval, which remove most of the protections CSP provides against Cross Site Scripting."
                },
                {
                  "status": "Open",
                  "severity": "Medium",
                  "type": "Tampering",
                  "description": "DOM Based XSS is an XSS attack wherein the attack payload is executed because of modifying the DOM “environment” in the victim’s browser used by the original client-side script, so that the client-side code runs in an “unexpected” manner. That is, the page itself (the HTTP response that is) does not change, but the client-side code contained in the page executes differently due to the malicious modifications that have occurred in the DOM environment.\n\nAttacker can make use of cross site scripting vulnerability in the application to perform various attacks such as, phishing, temporary defacements, possible introduction of worms.",
                  "title": "DOM XSS",
                  "mitigation": "HTML encode the output that is echoed back to the user"
                },
                {
                  "status": "Open",
                  "severity": "High",
                  "title": "Reflected XSS and Stored XSS",
                  "type": "Tampering",
                  "description": "Reflected Cross-site Scripting (XSS) sometimes referred to as Non-Persistent XSS is a vulnerability that allows an attacker to send malicious code (usually in the form of JavaScript) to another user, because a browser cannot know if the script should be trusted or not, it will execute the script in the user context allowing the attacker to access any cookies or session tokens retained by the browser.\n\nCross site scripting (also referred to as XSS) is a vulnerability that allows an attacker to send malicious code (usually in the form of JavaScript) to another use. Stored Cross site scripting is the most dangerous type of Cross Site Scripting. Stored XSS occurs when a web application gathers input from a user which might be malicious, and then stores that input in a data store for later use. A successful exploitation occurs when any user visits a page with stored XSS.\n\nAttacker can make use of cross site scripting vulnerability in the application to perform various attacks such as, phishing, temporary defacements, user session hijacking, possible introduction of worms etc.",
                  "mitigation": "HTML encode the output that is echoed back to the user.\n\nApply white listing technique to filter out unexpected input."
                }
              ],
              "attrs": {
                ".element-shape": {
                  "class": "element-shape hasOpenThreats isInScope"
                },
                "text": {
                  "text": "Exploitable\nVulnerabilities exist in\nDVWA Application"
                },
                ".element-text": {
                  "class": "element-text hasOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Boundary",
              "smooth": true,
              "source": {
                "x": 587,
                "y": 269
              },
              "target": {
                "x": 531,
                "y": 395
              },
              "vertices": [
                {
                  "x": 379,
                  "y": 315
                }
              ],
              "id": "0c737505-f6af-44d3-897e-7e56ba6b40ed",
              "z": 28,
              "attrs": {}
            },
            {
              "type": "tm.Actor",
              "size": {
                "width": 160,
                "height": 80
              },
              "position": {
                "x": 504,
                "y": 496
              },
              "angle": 0,
              "id": "6c167579-ccdf-4d7f-a51e-eabba365572b",
              "z": 29,
              "hasOpenThreats": false,
              "attrs": {
                ".element-shape": {
                  "class": "element-shape hasNoOpenThreats isInScope"
                },
                "text": {
                  "text": "Vulnerabilities exist but\nnot exploitable"
                },
                ".element-text": {
                  "class": "element-text hasNoOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Flow",
              "smooth": true,
              "source": {
                "id": "5826c428-383e-4f1b-b3e5-e119211a5579"
              },
              "target": {
                "id": "6c167579-ccdf-4d7f-a51e-eabba365572b"
              },
              "vertices": [],
              "id": "095d0d7c-11b9-417d-a0d0-d31577987615",
              "labels": [
                {
                  "position": {
                    "distance": 0.5096067845931923,
                    "offset": 2.5186749333418192
                  },
                  "attrs": {
                    "text": {
                      "text": "High Security Level",
                      "font-weight": "400",
                      "font-size": "small"
                    }
                  }
                }
              ],
              "z": 30,
              "hasOpenThreats": false,
              "attrs": {
                ".marker-target": {
                  "class": "marker-target hasNoOpenThreats isInScope"
                },
                ".connection": {
                  "class": "connection hasNoOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Boundary",
              "smooth": true,
              "source": {
                "x": 541,
                "y": 436
              },
              "target": {
                "x": 478,
                "y": 563
              },
              "vertices": [
                {
                  "x": 366,
                  "y": 430
                }
              ],
              "id": "8cb0c1fc-861a-43b3-9c47-d8a78caf1cb5",
              "z": 31,
              "attrs": {}
            },
            {
              "type": "tm.Flow",
              "smooth": true,
              "source": {
                "id": "5826c428-383e-4f1b-b3e5-e119211a5579"
              },
              "target": {
                "id": "706f88ab-c8bc-4b1a-bbcb-5773d450e4b5"
              },
              "vertices": [],
              "id": "dc64445d-3b51-4a9e-8718-b6ff048aa18f",
              "labels": [
                {
                  "position": {
                    "distance": 0.6199912773581024,
                    "offset": -7.192763089275248
                  },
                  "attrs": {
                    "text": {
                      "text": "Low & Medium\nSecurity Level",
                      "font-weight": "400",
                      "font-size": "small"
                    }
                  }
                }
              ],
              "z": 32,
              "hasOpenThreats": false,
              "attrs": {
                ".marker-target": {
                  "class": "marker-target hasNoOpenThreats isInScope"
                },
                ".connection": {
                  "class": "connection hasNoOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Boundary",
              "smooth": true,
              "source": {
                "x": 335,
                "y": 541
              },
              "target": {
                "x": 198,
                "y": 543
              },
              "vertices": [
                {
                  "x": 289,
                  "y": 455
                },
                {
                  "x": 269,
                  "y": 439
                },
                {
                  "x": 245,
                  "y": 444
                }
              ],
              "id": "f3dc300a-d06b-41e5-84e4-a5f8d7c88333",
              "z": 33,
              "attrs": {}
            },
            {
              "type": "tm.Boundary",
              "smooth": true,
              "source": {
                "x": 337,
                "y": 20
              },
              "target": {
                "x": 368,
                "y": 148
              },
              "vertices": [
                {
                  "x": 253,
                  "y": 47
                },
                {
                  "x": 260,
                  "y": 81
                },
                {
                  "x": 360,
                  "y": 141
                }
              ],
              "id": "c6db3349-451a-4b28-9d86-ebd75467213c",
              "z": 35,
              "attrs": {}
            },
            {
              "type": "tm.Boundary",
              "smooth": true,
              "source": {
                "x": 675,
                "y": 42
              },
              "target": {
                "x": 605,
                "y": 244
              },
              "vertices": [
                {
                  "x": 557,
                  "y": 91
                }
              ],
              "id": "ae296f19-7af6-4304-ba4c-f067b4fef707",
              "z": 36,
              "attrs": {}
            }
          ]
        },
        "size": {
          "height": 2267.133544921875,
          "width": 864
        }
      }
    ],
    "reviewer": "Demo"
  }
}